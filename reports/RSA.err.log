Traceback (most recent call last):
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\site-packages\jupyter_core\utils\__init__.py", line 172, in wrapped
    return loop.run_until_complete(inner)
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\asyncio\base_events.py", line 616, in run_until_complete
    return future.result()
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "c:\users\ishun_000\appdata\local\programs\python\python38\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from Crypto.Util import number
from random import randint,getrandbits
import math

class RSA:
  def __init__(self,n):
    #security bit n
    self.n = n
  
  #Extended Euclid Algorithm
  def Ex_Euclid(self,a,b):
    if b == 0:
      return 1,0,a
    else:
      q = a//b
      r = a%b
      s,t,c = self.Ex_Euclid(b,r)
      x = t
      y = s-q*t
      return x,y,c


  def keygen(self):
    self.p = number.getPrime(self.n)
    self.q = number.getPrime(self.n)
    self.phi_N = (self.p-1)*(self.q-1)
    self.N = self.p*self.q

    #generate e gcd(e,N)=1
    e = randint(2,self.phi_N-1)
    while math.gcd(e,self.phi_N) !=1:
      e = randint(2,self.phi_N-1)
    
    #compute modular_inverse d 
    _,d,__ = self.Ex_Euclid(self.phi_N,e)

    #secret_key
    self.d = d%self.phi_N
    #public_key
    self.e = e
  
  def enc(self,m):
    return pow(m,self.e,self.N)
  
  def dec(self,c):
    return pow(c,self.d,self.N)

  def get_keys(self):
    return self.e,self.d,self.p,self.q,self.N
  
#security bit
k=128
rsa = RSA(k)
plain_txt = getrandbits(k)
rsa.keygen()
enc_plaintxt = rsa.enc(plain_txt)
dec_plaintxt = rsa.dec(enc_plaintxt)
e,d,p,q,N = rsa.get_keys()


print("plaintext is :",plain_txt)
print("Prime number p,q,N :",p,q,N)
print("public key e :",e)
print("secret key d :",d)
print("encrypted plain_text :",enc_plaintxt)
print("decrypted encrypted_text :",dec_plaintxt)

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 1[0m
[1;32m----> 1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mCrypto[39;00m[38;5;21;01m.[39;00m[38;5;21;01mUtil[39;00m [38;5;28;01mimport[39;00m number
[0;32m      2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mrandom[39;00m [38;5;28;01mimport[39;00m randint,getrandbits
[0;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mmath[39;00m

[1;31mModuleNotFoundError[0m: No module named 'Crypto'

